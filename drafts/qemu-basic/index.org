#+title: Qemu
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: ^:{}
#+OPTIONS: html-style:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../github.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../custom.css"/>

这篇文章的目标是像使用 ~VMware~ , ~VirtualBox~ 那样，
能够用 ~QEMU~ 创建和配置学习测试用的虚拟机。

虚拟机中要安装的操作系统是Debian 12。

宿主机是MacOS Sequoia，Intel芯片，CPU是 ~8-Core Intel Core i9~ 。

* qemu-img
用来创建虚拟机镜像文件，使用方法很简单。

#+begin_src shell :noeval
qemu-img create -f qcow2 debian12.qcow2 10G
#+end_src

* qemu-system-x86_64
启动（创建）虚拟机主要用这个命令，需要根据自己的CPU架构选择不同的命令。

* 初识QEMU终端
什么参数都不指定，启动虚拟机。

#+begin_src shell :noeval
qemu-system-x86_64
#+end_src

会弹出QEMU的终端窗口，从终端中的输出可以看到虚拟机会按顺序尝试以不同设备驱动。

[[./images/ipxe1.png]]

如果中途按照画面中的提示，按 ~Ctrl-B~ ，就会进入 ~iPXE~ 的命令行。

稍微等一会，很快，会停在这样的画面。

[[./images/ipxe2.png]]

这时鼠标点击窗口区域，鼠标就会被捕获，并且键盘输入不会有任何反应。
如果仔细看，在标题栏能找到如何释放鼠标。

至少，释放鼠标之后，我们可以点击它的菜单到处看看。
但是这个终端界面，以及它的菜单中，都看不出如何使用这个终端。

我们可以放心点击关闭图标把窗口关掉，它和命令行输入 ~Ctrl-c~ 是一样的。

在进一步学会如何使用QEMU终端之前，我们需要一点点计算机和Linux的基础知识。

** 字符设备、串行接口、并行接口
在Linux中，硬件设备主要抽象为3种。
- 字符设备 - Character Device
- 块设备 - Block Device
- 网络设备 - Network Device

其中字符设备是与QEMU的终端有密切关系的。
从字面上也可以理解它是只能处理字符的设备。
在老式计算机中，字符设备主要有键盘、鼠标、打印机等。
以前这类设备通常都是通过串行(Serial)接口或并行(Parallel)接口与计算机连接。

[[./images/oldports.jpg]]

在Linux系统中输入 ~ls -l /dev/tty*~ 就可以看到列出很多tty的设备文件。

[[./images/tty1.png]]

这些设备的文件权限首位都是以 ~c~ 开头的，说明它们都是字符设备。

~tty~ 是 ~Teletypewriter~ 的缩写，就是老式打字机，它们长这样。

[[./images/tty2.png]]

知名的开源终端软件 ~PuTTY~ ,
其实也是支持通过串行接口数据线连接之后，充当目标计算机的控制台设备。

它们的特点都是：只能输入输出“字符”的字符设备。

** QEMU终端
前面看到的QEMU终端，事实上是多个不同的虚拟控制台(Vitual Console)。

可以从官方文档[[https://www.qemu.org/docs/master/system/keys.html][Keys in the graphical frontends]]章节中了解使用方式。

用快捷键 ~Ctrl-Alt-n~ 进行切换，它们都是字符设备。

- ~Ctrl-Alt-1~ 虚拟机的显示设备。
- ~Ctrl-Alt-2~ 是[[https://www.qemu.org/docs/master/system/monitor.html][QEMU的Monitor]]虚拟控制台。
- ~Ctrl-Alt-3~ 串行接口的虚拟控制台。
- ~Ctrl-Alt-4~ 并行接口的虚拟控制台。

我们启动虚拟机时如果指定 ~-nographic~ 参数，就不会打开QEMU终端窗口。

#+begin_src shell :noeval
qemu-system-x86_64 -nographic
#+end_src

为了能够让我们在没有虚拟控制台的情况下也能够调试虚拟机，
QEMU会把上面几个字符设备以多路复用的方式重定向到我们的Shell终端上。
我们就可以把我们Shell的标准输入和标准输出当作控制台了。

原来在QEMU终端窗口显示的内容，也会直接显示在我们的Shell终端里了。

这时 ~Ctrl-Alt-数字~ 再也不好用，也无法用 ~Ctrl-c~ 终止进程。

这时需要参考官方文档[[https://www.qemu.org/docs/master/system/mux-chardev.html][Keys in the character backend multiplexer]]章节。

由于我们没有安装任何操作系统，做不了什么。

按照文档中的说明，输入 ~Ctrl-a x~ 退出虚拟机。

(发现 ~QEMU Monitor~ 中输入 ~system_reset~ 重启时按 ~Ctrl-b~ 并不好用。)

** 用 ~iPXE~ 安装操作系统
[[https://ipxe.org/][iPXE]]是用来网络启动的引导程序。

输入 ~help~ 可以查看如何使用它，或者到[[https://ipxe.org/][iPXE官网]]查阅使用方法。

以[[https://www.debian.org/intro/][Debian]]为例，在它的官网最底部，有关于网络安装的链接。

[[./images/debian1.png]]

点进去根据自己的cpu架构类型找到下载地址。

[[./images/debian2.png]]

需要用到以下两个文件，两个文件加在一起都不到50M，这就是网络安装的好处。

第一个是内核，第二个是引导用的文件系统。

- https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/netboot/debian-installer/amd64/linux
- https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz

启动虚拟机。（如果不指定内存，会报错终止引导。）

#+begin_src shell :noeval
qemu-system-x86_64 -m 4G
#+end_src

先通过dhcp获取IP地址。

#+begin_src shell :noeval
dhcp net0
#+end_src
接着在iPXE命令行依次输入3个命令， ~kernel~ , ~initrd~, ~boot~ 。

正常 ~iPXE~ 是不支持 ~https~ ，在命令行中也没有办法粘贴长文本。

所以通常会把文件放到自己搭建的Web服务器上，直接下载脚本执行。

这里我们手敲输入。

#+begin_src shell :noeval
kernel http://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/netboot/debian-installer/amd64/linux
initrd http://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
boot
#+end_src

如果没有报错，就会启动安装程序，后面和正常安装过程没什么区别。

[[./images/ipxe3.png]]

只是因为我们没有添加磁盘，会让我们手动选择磁盘驱动器。

[[./images/ipxe4.png]]

以无磁盘模式继续。

[[./images/ipxe5.png]]

到分区阶段，我们就会发现没有办法往下进行了，因为它让我们选择网络磁盘。

总之没有磁盘就无法完成操作系统的安装。

到此，我们也达到了简单了解 ~iPXE~ 方式安装的目的。

* 最小化虚拟设备
当我们没有指定任何参数启动QEMU时，除了特殊的QEMU Monitor之外，
也至少会为我们的虚拟机提供以下3个设备。
- 虚拟机的显示设备 (~Ctrl-Alt-1~)
- 串行接口虚拟控制台 (~Ctrl-Alt-3~)
- 并行接口虚拟控制台 (~Ctrl-Alt-4~)

按照官方文档，为了最小化定制，我们可以指定 ~-nodefaults~ 参数禁用所有设备。

#+begin_src shell :noeval
qemu-system-x86_64 -nodefaults
#+end_src

[[./images/empty1.png]]

在这个终端中，按任何快捷键都没有反馈，也比较符合预期

后面我们会基于这个前提，一点点自定义虚拟设备提供给虚拟机。

为了理解命令行参数，我们也需要再了解一点点QEMU中的概念。

** QEMU Monitor
前面提到QEMU Monitor是用来查看和控制虚拟机状态的特殊的控制台。

为了了解QEMU默认行为，加上 ~-S~ 参数重新执行命令。

~-S~ 参数的作用是启动qemu之后，不启动CPU。

#+begin_src shell :noeval
qemu-system-x86_64 -S
#+end_src

[[./images/defaults1.png]]

因为没有启动CPU，所以虚拟机显示设备没有输出。

输入 ~Ctrl-Alt-2~ 切换到Monitor，输入 ~info qtree~ 查看设备树。

以 ~dev:~ 开头的行就是设备。

我们只关心

- 目前有反馈的键盘、鼠标。
- 与4个控制台有关的设备信息。
  - 虚拟机显示设备：主要查看有没有VGA这种传统显示设备相关信息。
  - QEMU Monitor：与虚拟机本身无关
  - 串行接口：串行接口，即serial。
  - 并行接口：并行接口，即parallel。
- 虚拟机控制台中的输出内容
  - 软盘驱动器
  - 光盘驱动器
  - iPXE网络启动

[[./images/defaults2.png]]

[[./images/defaults3.png]]

除了看到VGA接口的设备信息，还可以知道加载了一个VGA的BIOS文件。

这类文件通常都在 ~QEMU安装目录/share~ 目录下。

~Homebrew~ 安装的路径是 ~/usr/local/share/qemu/vgabios-stdvga.bin~ 。

[[./images/defaults4.png]]

我们接着输入 ~c~ 启动CPU，输入 ~Ctrl-Alt-1~ 切换到虚拟机的显示设备，
就能看到和不带参数启动时一样的输出内容。

[[./images/defaults5.png]]

从输出中可以看到默认虚拟的还有 ~Floppy~, ~CDROM~, ~iPXE~ 网络启动。

从 ~iPXE~ 启动上下文也看到网卡 ~net0~ 的mac地址，并且分配了IP。

所以至少需要网卡。

[[./images/defaults6.png]]

[[./images/defaults7.png]]

[[./images/defaults8.png]]

除了网卡设备之外，还能看到加载的固件文件是哪个。

** 设备 ~前端~ 和 ~后端~
在官方文档[[https://www.qemu.org/docs/master/system/device-emulation.html][Device Emulation]]章节中有大致的说明。

即便不理解的很深，至少需要理解
#+begin_quote
~前端~ 和 ~后端~ 是 ~相对虚拟机内部~ 而言的。
#+end_quote

前端主要是指虚拟机操作系统“看得见”的设备管理器里的那些设备。
如果操作系统能够识别到设备，在安装过程中通常能够自动安装相应的驱动程序。

后端主要是指在QEMU中，前端的那些设备在背后是如何被虚拟或者仿真的。
比如像打印机这样的字符设备，我们通过虚拟后端，重定向到某个文件上。
这么一来，虚拟机中的操作系统认为自己成功调用系统中看到的打印机，
但实际上，它打印的内容是通过后端的虚拟设备“打印”到了宿主机文件中。

很多设备的模拟中，前后端都是成对的。

** 手动还原QEMU终端的默认状态
我们继续使用 ~-nodefaults~ ，一个一个手动指定设备，最后达到默认状态。

*** 创建虚拟机的显示设备
结合前面查到的VGA的信息和官方文档关于 ~-vga~ 参数的说明。

[[./images/defaults3.png]]

指定 ~-vga~ 参数启动。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std
#+end_src

[[./images/minimal1.png]]

*** 创建QEMU Monitor控制台
#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -chardev vc,id=foo1 \
    -mon foo1
#+end_src

- 我们用 ~-chardev~ 参数创建类型为 ~vc~ (Virtual Console)的字符设备后端，
  设置它的 ~id~ 为 ~foo1~ 。（后端）
- 我们用 ~-mon~ 指定QEMU的Monitor使用叫做 ~foo1~ 的设备后端。（前端）

该命令与以下简写形式等价。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc
#+end_src

但用 ~-chardev vc~ + ~-mon~ 这种形式，可以个性化定制虚拟控制台的属性。

例如，虚拟控制台屏幕的宽高、显示的行数和列数。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -chardev vc,id=foo1,rows=30,cols=78 \
    -mon foo1
#+end_src

*** 创建串行接口
我们在上面简写形式的基础上继续增加串行接口。

QEMU中，有一些前端设备参数是分成了两种，有些前端设备则只有一个。

像前面QEMU Monitor就分成了 ~-mon~ 和 ~-monitor~ ，
但是串行接口只有一个 ~-serial~ ，虽然也可以通过值的不同写法来区分两种形式。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -chardev vc,id=bar1,rows=25,cols=78 \
    -serial chardev:bar1
#+end_src

- 我们用 ~-chardev~ 参数创建类型为 ~vc~ (Virtual Console)的字符设备，
  设置它的 ~id~ 为 ~bar1~ ，屏幕显示25行，78列字符。（后端）
- 我们用 ~-serial~ 指定该串行接口使用叫做 ~bar1~ 的字符设备。（前端）

同样，如果没有自定义字符设备具体属性的需求，可以简写。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc
#+end_src

*** 创建并行接口
我们在上面简写形式的基础上继续增加并行接口。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -chardev vc,id=baz1,width=500,cols=300 \
    -parallel chardev:baz1
#+end_src

- 我们用 ~-chardev~ 参数创建类型为 ~vc~ (Virtual Console)的字符设备，
  设置它的 ~id~ 为 ~baz1~ ，屏幕宽高分别是500, 300像素。（后端）
- 我们用 ~-parallel~ 指定该串行接口使用叫做 ~bar1~ 的字符设备。（前端）

可以简写为。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc
#+end_src

*** 软盘驱动器
#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -device floppy
#+end_src

- 用 ~-device~ 参数创建类型为 ~floppy~ 的设备。（前端）

可以用以下命令查看支持的类型
#+begin_src shell :noeval
qemu-system-x86_64 -device help
#+end_src

不过如果想虚拟实际有内容的软盘，就需要用后端参数 ~-blockdev~ 。

设备的前端参数 ~-device~ 和后端参数 ~-blockdev~ 为一对。

我们目前不需要虚拟真正有内容的软盘介质，所以不需要用 ~-blockdev~ 。

这两个参数组合可以用 ~-drive~ 参数简写。

上面的命令也可以写成

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -drive if=floppy
#+end_src

*** 光盘驱动器
#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -device floppy \
    -device ide-cd
#+end_src

该命令也可以写成。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -device floppy \
    -drive if=ide,media=cdrom
#+end_src

*** 网卡
#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -device floppy \
    -device ide-cd \
    -netdev user,id=net0 \
    -device e1000,netdev=net0,romfile=efi-e1000.rom
#+end_src

- 用 ~-netdev~ 参数指定模式为 ~user~ 的网络设备（后端）。
  指定 ~id~ 为 ~net0~ 。
- 用 ~-device~ 参数创建类型为 ~e1000~ 的网络设备。（前端）
  连接叫做 ~net0~ 的后端，加载固件文件 ~efi-e1000.rom~ 。

~-netdev~ 和 ~-device~ 的组合关系，也可以用 ~-nic~ 参数简写。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga std \
    -monitor vc \
    -serial vc \
    -parallel vc \
    -device floppy \
    -device ide-cd \
    -nic user,model=e1000
#+end_src

只要网络设备型号选择 ~e1000~ ， QEMU会自动加载默认的 ~romfile~ 。

到这里我们差不多还原了QEMU默认终端窗口的样子。

* 可引导的最小化虚拟机
我们为了最小化设备，继续使用 ~nodefault~ ，只指定虚拟机工作必不可少的参数。

** VGA
VGA换成性能更高的 ~virtio~ 。

- https://forsworns.github.io/zh/blogs/20210226/
- https://blogs.oracle.com/linux/post/introduction-to-VirtIO

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio
#+end_src

** BISO
QEMU默认使用SeaBIOS，一种适用于PC的老式BIOS，具体加载文件是 ~bios.bin~ 。

~Homebrew~ 安装的位置在 ~/usr/local/share/qemu/bios.bin~ 。

[[./images/bios1.png]]

我们前面执行的命令
#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio
#+end_src

约等于执行

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -bios /usr/local/share/qemu/bios.bin
#+end_src

表现来看这个默认的BIOS应该是不支持人机交互的。

现代计算机已经基本不使用老式的BIOS，而是使用升级版的BIOS： ~UEFI~ 。

~Homebrew~ 安装的适合 ~x86_64~ 平台的 ~UEFI~ 固件代码文件在
~/usr/local/share/qemu//usr/local/share/qemu/edk2-x86_64-code.fd~ 。

通过 ~-bios~ 参数指定文件路径。

#+begin_example
-bios /usr/local/share/qemu/edk2-x86_64-code.fd
#+end_example

但是会报错，无法加载。

#+begin_example
qemu: could not load PC BIOS '/usr/local/share/qemu/edk2-x86_64-code.fd'
#+end_example

官方文档中也找不到详细的说明，根据多方的资料结合总结调整命令如下。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -drive if=pflash,format=raw,unit=0,file=/usr/local/share/qemu/edk2-x86_64-code.fd,read-only=on
#+end_src

启动之后还会闪过一个Logo。

[[./images/bios2.png]]

关于 ~UEFI Shell~ 的使用，可以看下面的文章。

VGA的虚拟终端中，可以使用 ~fn + ▲▼~ 滚动屏幕。

[[https://linuxhint.com/use-uefi-interactive-shell-and-its-common-commands/][How to Use UEFI Interactive Shell and Its Common Commands]]

输入 ~exit~ ，就会退出 ~UEFI Shell~ ，回到可能略熟悉的BIOS/UEFI的设置界面。

[[./images/bios3.png]]

~UEFI BIOS~ 的指定方式，只为了完整性，我们并不需要UEFI的特性，命令也较长。

接下来继续让QEMU使用默认的BIOS。

** 主板和CPU
因为我们的目标不是开发驱动或者学习关于主板芯片组或CPU的硬件知识，
而是使用虚拟机中的Linux来学习和测试应用层的内容，
所以我们实际上需要的是半虚拟化技术，而不是仿真。

我们更想要虚拟机的性能尽可能更多地接近真机。

*** 主板型号
~machine~ 参数的 ~type~ 属性来指定。

可以用以下命令查看可用的类型。

#+begin_src shell :noeval
qemu-system-x86_64 -machine type,help
#+end_src

默认是 ~pc-i440fx-9.2~ ，我们要使用 ~q35~ (~pc-q35-9.2~)。

区别可以看下面的文章， ~q35~ 最接近我们实际PC的主板。
- https://remimin.github.io/2019/07/09/qemu_machine_type/
- https://www.linux-kvm.org/images/0/06/2012-forum-Q35.pdf

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35
#+end_src

*** CPU型号
~cpu~ 参数来指定。

#+begin_src shell :noeval
qemu-system-x86_64 -cpu help
#+end_src

很多型号，其实不查阅大量资料基本看不懂，肯定也写不出来正确的。

~CPUID~ 更多，需要懂CPU的专业知识。

我们一般不会把虚拟机迁移到别的机器上。

所以让虚拟机直接识别宿主机的CPU型号即可，主要是影响虚拟机CPU开启的功能。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35 \
    -cpu host
#+end_src

*** CPU硬件加速
~machine~ 参数的 ~accel~ 属性，或者 ~accel~ 参数来指定。

官方文档的[[https://www.qemu.org/docs/master/system/introduction.html#virtualisation-accelerators][Virtualisation Accelerators]]列出不同情况应该选择的硬件加速模式。

有 ~kvm, xen, hvf, nvmm, whpx, tcg~ 。

QEMU默认使用的是 ~TCG~ (Tiny Code Generator)。

它相当于软件模拟，不受宿主机环境的限制，但性能比较差。

主要根据宿主机情况选。

- ~Linux~ 选 ~kvm~
- ~Windows~ 选 ~hax~
- ~MacOS~ 选 ~hvf~

段位到了可以看看其他的。

我们选 ~hvf~ 。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35 \
    -cpu host \
    -accel hvf
#+end_src

*** CPU的核数
用 ~smp~ 参数来指定。

现在不管是服务器还是PC，基本上都是多核的。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35 \
    -cpu host \
    -accel hvf \
    -smp cpus=4,cores=2,threads=2,sockets=1
#+end_src

- ~cpus~ 虚拟CPU个数
- ~cores~ 每个CPU核心个数
- ~threads~ 每个核心线程个数
- ~sockets~ CPU插槽个数

如果按 ~Inter Core i9-9980HK~ 的8核心，16线程指定应该是

#+begin_example
-smp cpus=16,cores=8,threads=2,sockets=1
#+end_example

** 内存
~m~ 参数来指定。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35 \
    -cpu host \
    -accel hvf \
    -smp cpus=4,cores=2,threads=2,sockets=1 \
    -m 4G
#+end_src

** 硬盘
前面我们已经看到没有硬盘，操作系统的安装过程是无法完成的。

先创建磁盘镜像文件。

#+begin_src shell :noeval
qemu-img create -f qcow2 debian12.qcow2 10G
#+end_src

加载磁盘镜像。

#+begin_src shell :noeval
qemu-system-x86_64 \
    -nodefaults \
    -vga virtio \
    -machine type=q35 \
    -cpu host \
    -accel hvf \
    -smp cpus=4,cores=2,threads=2,sockets=1 \
    -m 4G \
    -drive file=debian12.qcow2,if=virtio,format=qcow2,discard=unmap
#+end_src

~-discard=unmap~ 支持TRIM指令优化SSD存储

** 网络配置
QEMU有
QEMU默认的网络模式是 ~user~ 模式，但是它有众多的局限性。


| 特性          | ~user~              | ~vmnet~                     |
|---------------+---------------------+-----------------------------|
| 网络类型      | 宿主机做网关        | 原生网络栈（桥接/共享/NAT） |
| 性能          | 低（用户态）        | 高，接近物理网卡（内核态）  |
| IP            | 固定 ~10.0.2.15/24~ | DHCP或手动配置              |
| SSH访问虚拟机 | 必须配置端口转发    | 同真机                      |
| 多机通信      | 无法直接互通        | 虚拟机可直接互通            |

*** ~vmnet~ 分为以下三种类型：

- ~vmnet-host~ 只能和宿主机通信，相当于 ~VirtualBox~ 的 ~Host-only~
- ~vmnet-shared~ 可通过宿主机访问网络，相当于 ~VirtualBox~ 的 ~NAT~
- ~vmnet-bridged~ 于宿主机处在同一段网络，相当于 ~VirtualBox~ 的 ~Bridged~
